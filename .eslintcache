[{"/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/index.js":"1","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/App.js":"2","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/reducers/index.js":"3","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/Goals.js":"4","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/NavBar.js":"5","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/Goal.js":"6","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/Complete.js":"7","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/Home.js":"8","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/VirtualPet.js":"9","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/reducers/currentUser.js":"10","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/reducers/goals.js":"11","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/SignUp.jsx":"12","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/newTaskForm.jsx":"13","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/Login.jsx":"14","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/updateForm.jsx":"15","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/newForm.jsx":"16","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/updateTaskForm.jsx":"17","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/Footer.js":"18","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/LoginFormSection.js":"19","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/actions/auth.js":"20","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/SceneComponent.jsx":"21","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/MusicPlayer.js":"22"},{"size":899,"mtime":1613497368178,"results":"23","hashOfConfig":"24"},{"size":1791,"mtime":1613497266600,"results":"25","hashOfConfig":"24"},{"size":222,"mtime":1613496946029,"results":"26","hashOfConfig":"24"},{"size":3667,"mtime":1613502156095,"results":"27","hashOfConfig":"24"},{"size":3109,"mtime":1613496946007,"results":"28","hashOfConfig":"24"},{"size":8308,"mtime":1613496945995,"results":"29","hashOfConfig":"24"},{"size":3266,"mtime":1613498723243,"results":"30","hashOfConfig":"24"},{"size":1613,"mtime":1613499797383,"results":"31","hashOfConfig":"24"},{"size":7788,"mtime":1613496946012,"results":"32","hashOfConfig":"24"},{"size":343,"mtime":1613496946026,"results":"33","hashOfConfig":"24"},{"size":266,"mtime":1613496946028,"results":"34","hashOfConfig":"24"},{"size":3579,"mtime":1613496946009,"results":"35","hashOfConfig":"24"},{"size":2631,"mtime":1613496946014,"results":"36","hashOfConfig":"24"},{"size":2844,"mtime":1613496946004,"results":"37","hashOfConfig":"24"},{"size":6170,"mtime":1613496946016,"results":"38","hashOfConfig":"24"},{"size":3446,"mtime":1613496946013,"results":"39","hashOfConfig":"24"},{"size":3149,"mtime":1613496946018,"results":"40","hashOfConfig":"24"},{"size":317,"mtime":1613018513959,"results":"41","hashOfConfig":"24"},{"size":961,"mtime":1613496946005,"results":"42","hashOfConfig":"24"},{"size":212,"mtime":1613496945989,"results":"43","hashOfConfig":"24"},{"size":1601,"mtime":1612836272207,"results":"44","hashOfConfig":"24"},{"size":8332,"mtime":1613504201423,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},"l1appl",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"49"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"49"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"49"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"49"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"49"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"49"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"49"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"49"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"49"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"49"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/index.js",["103"],"import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { BrowserRouter } from 'react-router-dom'\n\nimport './semantic-ui-css/semantic.min.css';\nimport './index.css';\n\nimport App from './App';\nimport Footer from './components/Footer'\n\nimport { Provider } from 'react-redux'\nimport rootReducer from './reducers/index'\nimport { createStore } from 'redux'\n\n\nconst store = createStore(\n  rootReducer, \n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\n\nReactDOM.render(\n  <Provider store={store}>\n    {/* <BrowserRouter> */}\n      <App />\n      {/* <Footer/> */}\n    {/* </BrowserRouter>, */}\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n",["104","105"],"/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/App.js",[],"/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/reducers/index.js",[],"/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/Goals.js",["106"],"/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/NavBar.js",["107","108"],"import React from 'react'\r\nimport logo from '../images/sprig logo.png'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom';\r\nimport { logoutUser } from '../actions/auth'\r\n\r\nclass NavBar extends React.Component {\r\n\r\n    handleClick = () => {\r\n        this.props.logoutUser()\r\n      }\r\n\r\nrender() {\r\n\r\n    return (\r\n \r\n        \r\n        <div className='NavBar'>\r\n\r\n            {\r\n            this.props.currentUser \r\n            ? \r\n                <div className=\"ui mini menu\">\r\n\r\n                    <div className=\"ui dropdown icon item\">\r\n                        <img className=\"ui mini circular image\" src={logo}/>\r\n                        <i className=\"dropdown icon\"></i>\r\n                    </div>\r\n\r\n\r\n                    <p className=\" ui header item\">Welcome {this.props.currentUser.username}</p>\r\n                        <div className=\"ui buttons\">\r\n                            <Link className=\"ui button item\" to='/goals'>Goals</Link>\r\n                            <Link className=\"ui button item\" to='/completed'>Completed</Link>\r\n                        </div>\r\n\r\n\r\n                    <div class=\"right menu\">\r\n                        {/* <div class=\"item\">\r\n                            <div class=\"ui icon input\">\r\n                                <input type=\"text\" placeholder=\"Search...\"/>\r\n                                <i class=\"search link icon\"></i>\r\n                            </div>\r\n                        </div> */}\r\n\r\n                        <Link className=\"ui button item\" to='/home' onClick={this.handleClick}>Log Out</Link>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            : \r\n\r\n                <div className=\"ui mini menu\">\r\n\r\n                    <div className=\"ui dropdown icon item\">\r\n                        <img className=\"ui mini circular image\" src={logo}/>\r\n                        <i className=\"dropdown icon\"></i>\r\n                    </div>\r\n\r\n\r\n                        <p className=\" ui header item\">Welcome</p>\r\n                        <div className=\"ui buttons\">\r\n                            <Link className=\"ui disabled button item\" to='/goals'>Goals</Link>\r\n                            <Link className=\"ui disabled button item\" to='/completed'>Completed</Link>\r\n                        </div>\r\n\r\n\r\n                    <div class=\"right menu\">\r\n                        {/* <div class=\"item\">\r\n                            <div class=\"ui icon input\">\r\n                                <input type=\"text\" placeholder=\"Search...\"/>\r\n                                <i class=\"search link icon\"></i>\r\n                            </div>\r\n                        </div> */}\r\n\r\n                        <Link className=\"ui button item\" to='/home'>Log In</Link>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      currentUser: state.currentUser\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = {\r\n    logoutUser: logoutUser\r\n  }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/Goal.js",["109","110","111","112","113","114","115"],"import React from 'react'\r\nimport { Link , Redirect} from \"react-router-dom\";\r\n\r\nimport logo from '../images/sprig logo.png'\r\nimport { SetStateAction } from '@babylonjs/core';\r\n\r\nimport { connect } from 'react-redux'\r\nimport { currentUser } from '../actions/auth'\r\n\r\nclass Goal extends React.Component {\r\n  \r\n  \r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n          goal: { tasks: [] },\r\n          numoftasks: 0 };\r\n\r\n          this.handleDelete = this.handleDelete.bind(this);\r\n          this.markComplete = this.markComplete.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n      if (!this.props.currentUser) {\r\n        this.props.history.push('/home')\r\n    }\r\n\r\n      const { match: {params: { id }}} = this.props;\r\n      \r\n        const url = `http://localhost:3001/goals/${id}`;\r\n\r\n        fetch(url)\r\n        .then(response => {\r\n            if (response.ok) {\r\n            return response.json();\r\n            }\r\n            throw new Error(\"Network response was not ok.\");\r\n        })\r\n        .then(response => this.setState({ goal: response }))\r\n        .catch(() => this.props.history.push(\"/goals\"));\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n      \r\n      const tasklistlength = this.state.goal.tasks.length\r\n\r\n      if(prevState.numoftasks !== tasklistlength) {\r\n        console.log(prevState.numoftasks, tasklistlength)\r\n\r\n        this.setState({\r\n          numoftasks: tasklistlength\r\n        })\r\n      }\r\n    }\r\n\r\n    handleDelete() {\r\n      const { match: {params: { id }}} = this.props;\r\n      const { goal } = this.state;\r\n      \r\n      const correctPath = goal.completed === false ? '/goals' : '/completed'\r\n      const url = `http://localhost:3001/goals/${id}`;\r\n\r\n        fetch(url, {\r\n            method: \"DELETE\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n            }\r\n          })\r\n            .then(response => {\r\n              if (response.ok) {\r\n                return response.json();\r\n              }\r\n              throw new Error(\"Network response was not ok.\");\r\n            })\r\n            .then(() => this.props.history.push(correctPath))\r\n            .catch(error => console.log(error.message));\r\n\r\n    }\r\n\r\n    markComplete() {\r\n      const { match: {params: { id }}} = this.props;\r\n      const url = `http://localhost:3001/goals/${id}`;\r\n      \r\n       //-----------------------\r\n      const reqObj = {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body:  JSON.stringify({\r\n          completed: !this.state.goal.completed\r\n        })\r\n\r\n      }\r\n    //------------------------------\r\n    fetch(url, reqObj)\r\n        .then(response => {\r\n        if (response.ok) {\r\n            return response.json();\r\n        }\r\n        throw new Error(\"Network response was not ok.\");\r\n        })\r\n        .then(response => this.props.history.push(`/goals/${response.id}`))\r\n        .catch(error => console.log(error.message));\r\n\r\n        this.setState({\r\n          goal: {...this.state.goal, completed: !this.state.goal.completed}\r\n        })\r\n\r\n    }\r\n\r\n    grabTasks() {\r\n      const { goal } = this.state;\r\n      const tasklistlength = goal.tasks.length\r\n\r\n      return goal.tasks.map((task, index) => (\r\n\r\n        <div className='Task item'>\r\n\r\n        <i className=\"right triangle icon\"></i>\r\n\r\n          <div className=\"content\">\r\n            <div className=\"header\">{task.name}</div>\r\n            <div className=\"description\">{task.description}</div>\r\n          </div>\r\n\r\n          <div class=\"ui small right floated icon buttons\">\r\n            <button class=\"ui button\" onClick={() => this.taskDelete(task)}><i class=\"red eraser icon\"></i></button>\r\n            <Link to={{pathname: `/tasks/${task.id}/edit`, state: {goal_name: goal.name}}}><button class=\"ui button\"><i class=\"black edit icon\"></i></button></Link>\r\n          </div>\r\n\r\n      </div>\r\n        ))\r\n\r\n    }\r\n\r\n    taskDelete(task) {\r\n      const { match: {params: { id }}} = this.props;\r\n      const url = `http://localhost:3001/tasks/${task.id}`;\r\n\r\n        fetch(url, {\r\n            method: \"DELETE\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n            }\r\n          })\r\n            .then(response => {\r\n              if (response.ok) {\r\n                return response.json();\r\n              }\r\n              throw new Error(\"Network response was not ok.\");\r\n            })\r\n            .then(() => this.props.history.push(`/goals/${id}`))\r\n            .catch(error => console.log(error.message));\r\n    }\r\n\r\n\r\n  render() {\r\n\r\n          const { goal } = this.state;\r\n          const goalTasks = goal.tasks\r\n          const goalID = goal.id\r\n\r\n          let taskList = \"No tasks created yet\";\r\n\r\n          const goalDone = (\r\n            <i className=\"ui circular olive right floated button\" onClick={this.markComplete}>Complete</i>\r\n          )\r\n          const goalNotDone = (\r\n            <i className=\"ui circular red right floated button\" onClick={this.markComplete}>Not Complete</i>\r\n          )\r\n          \r\n          \r\n    \r\n      return (\r\n          \r\n          <div className='Goals'>\r\n\r\n\r\n              <div className=\"ui two column centered grid\">\r\n\r\n                  <div className=\"Main six wide column\">\r\n                    <div className=\"two ui buttons\">\r\n                        <Link to={`/goals/${goal.id}/edit`}><button className=\"ui yellow left attached button\" >\r\n                            Update Goal\r\n                        </button></Link>\r\n\r\n                        <button className=\"ui yellow right attached button\"  onClick={this.handleDelete}>\r\n                            Delete Goal\r\n                        </button>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"Main eight wide column\">\r\n                      <div className=\"ui segments\">\r\n                              <a className=\"ui small image\"> <img src={logo}/> </a>\r\n\r\n                              <div className=\"ui olive segment\">\r\n                                  <h2 class=\"ui header\">\r\n                                      {goal.completed === true ? goalDone : goalNotDone}\r\n                                      <div class=\"content\"> {goal.name} </div>\r\n                                  </h2>\r\n                              </div>\r\n\r\n                              <div className='ui horizontal segments'>\r\n                                <span class=\"ui olive segment\">\r\n                                  <i class=\"calendar outline icon\"></i>\r\n                                  {goal.date}\r\n                                </span>\r\n\r\n                                <span class=\"ui olive segment\">\r\n                                  <i class=\"clock outline icon\"></i>\r\n                                  {goal.time}\r\n                                </span>   \r\n                              </div>\r\n\r\n                                  <div className='ui olive secondary segment'>\r\n                                  <div className=\"ui header\">Info</div>\r\n                                  <div className=\"description\"> <p>{goal.info}</p> </div>\r\n                              \r\n                                  <a className=\"header\"> <h3>Tasks</h3></a>\r\n                                  <div className=\"ui divider\"></div>\r\n                                  \r\n                                    <Link to={{pathname: '/tasks/new', state: {goal_name: goal.name, goal_id: goalID}}}><button className=\"ui yellow basic fluid labeled icon button\">\r\n                                          <i className=\"plus icon\"></i>\r\n                                          New Task\r\n                                    </button></Link> \r\n\r\n                                  <div className= 'ui middle aligned divided list'>\r\n\r\n                                  {goalTasks.length > 0 ? this.grabTasks() : taskList}\r\n                                  </div>\r\n                              </div> \r\n                      </div>\r\n                  </div>\r\n              </div>\r\n\r\n          </div>\r\n      );\r\n    }\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    currentUser: state.currentUser,\r\n    goals: state.goals\r\n  }\r\n}\r\nexport default connect(mapStateToProps)(Goal);","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/Complete.js",["116"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { connect } from 'react-redux'\r\nimport { currentUser } from '../actions/auth'\r\n\r\n\r\nclass Complete extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          goals: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.currentUser) {\r\n            this.props.history.push('/home')\r\n        }\r\n\r\n        const url = \"http://localhost:3001/goals\";\r\n        fetch(url)\r\n          .then(response => {\r\n            if (response.ok) {\r\n              return response.json();\r\n            }\r\n            throw new Error(\"Network response was not ok.\");\r\n          })\r\n          .then(response => this.setState({ goals: response }))\r\n          .catch(() => this.props.history.push(\"/\"));\r\n    }\r\n\r\n\r\nrender() {\r\n        const { goals } = this.state;\r\n\r\n        const completedGoals = goals.filter((goal, index) => (\r\n            goal.completed === true && goal.user_id === this.props.currentUser.id\r\n        ));\r\n\r\n        const allGoals = completedGoals.map((goal, index) => (\r\n            <div className='GoalCard grey ui fluid card'>\r\n                <div className=\"content\">\r\n                    {/* <i class=\"right floated like icon\">{goal.tag_id}</i> */}\r\n                    <button class=\"circular ui right floated olive icon button\">\r\n                        <i class=\"check icon\"></i>\r\n                    </button>\r\n                    <div className=\"header\">{goal.name} <i class=\"small right floated list icon\"> {goal.tasks.length}</i></div>\r\n                </div>\r\n\r\n                <div className=\"black description\">\r\n                    {goal.info}\r\n                </div>\r\n\r\n                <div class=\"extra content\">\r\n                    <span class=\"left floated like\">\r\n                    <i class=\"calendar outline icon\"></i>\r\n                    {goal.date}\r\n                    </span>\r\n                    <span class=\"right floated star\">\r\n                    <i class=\"clock outline icon\"></i>\r\n                    {goal.time}\r\n                    </span>   \r\n                </div>\r\n                <Link to={`/goals/${goal.id}`}><div class=\"ui bottom attached button\">\r\n                    <i class=\"angle down icon\"></i>\r\n                    Details\r\n                </div></Link>\r\n                \r\n\r\n            </div>\r\n        ));\r\n\r\n        const noGoals = (\r\n            <div className='GoalCard ui header'>\r\n            <h4>\r\n                No goals completed yet.\r\n            </h4>\r\n            </div>\r\n        )\r\n\r\n\r\n    \r\n\r\n    return (\r\n        \r\n        <div className='Goals'>\r\n\r\n            <div className=\"ButtonColumn sixteen wide column\">\r\n            </div>\r\n  \r\n\r\n            <div className=\"Main ui two column centered grid\">\r\n                <div className=\"six wide column\">Placeholder</div>\r\n                <div className=\"ten wide column\">\r\n                    {goals.length > 0 ? allGoals : noGoals}\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      currentUser: state.currentUser,\r\n      goals: state.goals\r\n    }\r\n  }\r\n\r\nexport default connect(mapStateToProps)(Complete);","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/Home.js",["117","118","119","120","121"],"/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/VirtualPet.js",["122","123","124","125","126","127"],"import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport './Theme.css';\r\n\r\nimport'@babylonjs/loaders/glTF'\r\nimport * as BABYLON from \"@babylonjs/core/Legacy/legacy\";\r\nimport SceneComponent from './SceneComponent';\r\nimport { ArcRotateCamera, Vector3, HemisphericLight, MeshBuilder } from '@babylonjs/core';\r\n\r\nlet container;\r\nlet box;\r\n\r\n\r\n\r\nclass VirtualPet extends React.Component {\r\n\r\n    \r\nrender() {\r\n\r\n    const { location } = this.props;\r\n    if (location.pathname.match('/home')){\r\n      return null;\r\n    }\r\n\r\n    return (\r\n        \r\n        <div className='VirtualPet' >\r\n            <SceneComponent antialias onSceneReady={this.onSceneReady} onRender={this.onRender} id='my-canvas' />\r\n        </div>\r\n    );\r\n  }\r\n\r\n\r\n    onSceneReady = scene => {\r\n\r\n      // Default Environment\r\n      const environment =  scene.createDefaultEnvironment({ \r\n        createSkybox: false,\r\n        createGround: true,\r\n        groundSize: 500,\r\n        groundColor: BABYLON.Color3.White(),\r\n        enableGroundShadow: false,\r\n        groundYBias: 0.01\r\n      });\r\n\r\n      // scene.fogMode = BABYLON.Scene.FOGMODE_EXP2;\r\n      // scene.fogColor = new BABYLON.Color3(0.9, 0.9, 0.85);\r\n      // scene.fogDensity = .05;\r\n\r\n      let ground = BABYLON.Mesh.CreateGround(\"ground\", 100, 100, 1, scene);\r\n\r\n      var myMaterial = new BABYLON.StandardMaterial(\"myMaterial\", scene);\r\n        myMaterial.diffuseTexture = new BABYLON.Texture(\"models/images/grass.jpg\", scene);\r\n        myMaterial.diffuseTexture.hasAlpha = true;\r\n        myMaterial.alpha = 0.8;\r\n\r\n        myMaterial.diffuseColor = new BABYLON.Color3(0.6, 0.9, 0.6);\r\n        ground.material = myMaterial\r\n\r\n      \r\n\r\n\r\n        //Skybox--------------------------------------------------\r\n        const skybox = BABYLON.MeshBuilder.CreateBox(\"skyBox\", {size:1000.0}, scene);\r\n        const skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\r\n            skyboxMaterial.backFaceCulling = false;\r\n            skyboxMaterial.reflectionTexture = new BABYLON.CubeTexture(\"models/images/TropicalSunnyDay\", scene);\r\n            skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\r\n            skyboxMaterial.diffuseColor = new BABYLON.Color3(0, .3, 0);\r\n            skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\r\n            skybox.material = skyboxMaterial;\r\n\r\n        //Camera--------------------------------------------------\r\n        const camera = new ArcRotateCamera(\"camera1\", -Math.PI / 2, Math.PI / 2, 12, new Vector3(0, 12, -0), scene);\r\n          scene.activeCamera.lowerRadiusLimit = 7;\r\n          scene.activeCamera.upperRadiusLimit = 5;\r\n          scene.activeCamera.alpha = 4;\r\n          scene.activeCamera.beta = 2.5;\r\n          scene.activeCamera.wheelPrecision = 5;\r\n          scene.activeCamera.upperBetaLimit=1.5; //Math.PI*(0)/180;\r\n          scene.activeCamera.lowerBetaLimit=.5;\r\n          scene.activeCamera.lowerAlphaLimit = Math.PI * 1.3;\r\n          scene.activeCamera.upperAlphaLimit = Math.PI * 1.7;\r\n          \r\n        const canvas = scene.getEngine().getRenderingCanvas();\r\n        // This attaches the camera to the canvas\r\n        camera.attachControl(canvas, true);\r\n\r\n        //Light--------------------------------------------------\r\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n        const light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene);\r\n        \r\n        // Default intensity is 1. Let's dim the light a small amount\r\n        light.intensity = 1;\r\n\r\n\r\n        \r\n        // console.log(scene.animationGroups.length);\r\n        // scene.animationGroups[3].stop();\r\n        // scene.animationGroups[0].start(true);\r\n\r\n\r\n        BABYLON.SceneLoader.LoadAssetContainer(\"../models/\", \"sprig-wave.glb\", scene, function (container) {\r\n            const meshes = container.meshes;\r\n            const materials = container.materials;\r\n\r\n            const sprig = meshes[0]\r\n            const sprigM = materials[0]\r\n\r\n            scene.beforeRender = () => {\r\n                sprig.position = new BABYLON.Vector3(1.5, 6.5, 5);\r\n                sprig.rotation = new BABYLON.Vector3(0, 2.8, 0);\r\n\r\n                sprigM.roughness  = 0.4;\r\n                // sprigM.diffuseColor = new BABYLON.Color3(0, .3, 0);\r\n                // sprigM.specular = BABYLON.Color3.Black();\r\n\r\n\r\n                }\r\n            // Adds all elements to the scene\r\n            container.addAllToScene();\r\n\r\n        });\r\n\r\n        \r\n        BABYLON.SceneLoader.LoadAssetContainer(\"../models/\", \"focus_room.glb\", scene, function (container) {\r\n          const meshes = container.meshes;\r\n          const materials = container.materials;\r\n\r\n          const room = meshes[0]\r\n\r\n\r\n          // scene.animationGroups.forEach(anim => {\r\n          //   console.log(anim)\r\n          // })\r\n          // console.log(scene.animationGroups.length)\r\n        \r\n\r\n          scene.beforeRender = () => {\r\n            room.scaling = new BABYLON.Vector3(-5, 4, 5);\r\n            room.position = new BABYLON.Vector3(0, 1.8, 30);\r\n            \r\n\r\n\r\n              // room.rotation.y = 1.57;\r\n              // room.rotationQuaternion = undefined;\r\n              //room.rotation = new BABYLON.Vector3(0, 3.14, 0);\r\n\r\n              }\r\n          // Adds all elements to the scene\r\n          container.addAllToScene();\r\n          const room_fan_1 = scene.animationGroups.find(a => a.name === 'Take 001');\r\n          room_fan_1.start(true)\r\n          const room_fan_2 = scene.animationGroups.find(a => a.name === 'KeyAction');\r\n          room_fan_2.start(true)\r\n\r\n          const desk_plant = scene.animationGroups.find(a => a.name === 'Key.001Action');\r\n          desk_plant.start(true)\r\n\r\n          const tree = scene.animationGroups.find(a => a.name === 'ArmatureAction');\r\n          tree.start(true)\r\n\r\n          const leaf_1 = scene.animationGroups.find(a => a.name === 'Leaf.001Action');\r\n          leaf_1.start(true)\r\n          const leaf_1_1 = scene.animationGroups.find(a => a.name === 'Leaf.001Action.001');\r\n          leaf_1_1.start(true)\r\n\r\n          const leaf_2 = scene.animationGroups.find(a => a.name === 'Leaf.002Action');\r\n          leaf_2.start(true)\r\n          const leaf_2_1 = scene.animationGroups.find(a => a.name === 'Leaf.002Action.001');\r\n          leaf_2_1.start(true)\r\n\r\n          const leaf_3 = scene.animationGroups.find(a => a.name === 'Leaf.003Action');\r\n          leaf_3.start(true)\r\n          const leaf_3_1 = scene.animationGroups.find(a => a.name === 'Leaf.003Action.001');\r\n          leaf_3_1.start(true)\r\n\r\n          const leaf_4 = scene.animationGroups.find(a => a.name === 'Leaf.004Action');\r\n          leaf_4.start(true)\r\n          const leaf_4_1 = scene.animationGroups.find(a => a.name === 'Leaf.004Action.001');\r\n          leaf_4_1.start(true)\r\n\r\n          const leaf_5 = scene.animationGroups.find(a => a.name === 'Leaf.005Action');\r\n          leaf_5.start(true)\r\n          const leaf_5_1 = scene.animationGroups.find(a => a.name === 'Leaf.005Action.001');\r\n          leaf_5_1.start(true)\r\n\r\n          const leaf_6 = scene.animationGroups.find(a => a.name === 'Leaf.006Action');\r\n          leaf_6.start(true)\r\n          const leaf_6_1 = scene.animationGroups.find(a => a.name === 'Leaf.006Action.001');\r\n          leaf_6_1.start(true)\r\n      });\r\n  }\r\n\r\n    //Will run on every frame render.  We are spinning the box on y-axis.\r\n    //   onRender = scene => {\r\n    //       if (box !== undefined) {\r\n    //       var deltaTimeInMillis = scene.getEngine().getDeltaTime();\r\n    //       const rpm = 10;\r\n    //       box.rotation.y += ((rpm / 60) * Math.PI * 2 * (deltaTimeInMillis / 1000));\r\n    //       }\r\n    // }\r\n\r\n\r\n}\r\nexport default withRouter(VirtualPet);","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/reducers/currentUser.js",[],"/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/reducers/goals.js",[],"/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/SignUp.jsx",["128","129","130"],"import React, {useState} from 'react'\r\nimport { Link , withRouter} from \"react-router-dom\";\r\nimport { connect } from 'react-redux'\r\nimport { loginSuccess } from '../actions/auth'\r\n\r\nimport logo from '../images/sprig logo.png'\r\n\r\n\r\nclass SignUp extends React.Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          username: \"\",\r\n          email: \"\",\r\n          password: \"\",\r\n          error: \"\"\r\n      };\r\n      this.onChange = this.onChange.bind(this);\r\n      this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n\r\n  onChange = (event) => {\r\n    this.setState({ \r\n        [event.target.name]: event.target.value    \r\n    });\r\n  }\r\n\r\n  onSubmit(event) {\r\n  event.preventDefault();\r\n  const url = \"http://localhost:3001/signup\";\r\n  const newUser = {...this.state}\r\n  //-----------------------\r\n  const reqObj = {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body:  JSON.stringify(newUser)\r\n  }\r\n  //------------------------------\r\n  fetch(url, reqObj)\r\n    .then(resp => {\r\n      if (resp.ok) {\r\n          return resp.json();\r\n      }\r\n      throw new Error(\"Network response was not ok.\");\r\n      })\r\n    .then(data => {\r\n      if (data.error){\r\n        this.setState({\r\n          error: data.error\r\n        })\r\n      } else {\r\n        this.props.loginSuccess(data)\r\n        this.props.history.push('/goals')\r\n      }\r\n    })\r\n  }\r\n\r\n//   fetch(url, reqObj)\r\n//   .then(resp => resp.json())\r\n//   .then(data => {\r\n//     if (data.error){\r\n//       this.setState({\r\n//         error: data.error\r\n//       })\r\n//     } else {\r\n//       this.props.loginSuccess(data)\r\n//       this.props.history.push('/goals')\r\n//     }\r\n//   })\r\n// }\r\n\r\n\r\n  render() {\r\n    return (\r\n\r\n    <div className='SignUp'>\r\n\r\n      <h2 className=\"ui yellow image header\">\r\n        <img src={logo} className=\"image\"/>\r\n          <div className=\"content\">\r\n          Create a new Account\r\n          </div>\r\n      </h2>\r\n\r\n        <div className=\"ui two column centered grid\">\r\n          <div className=\"twelve wide column\">\r\n            \r\n            <form className=\"ui form\" onSubmit={this.onSubmit}>\r\n\r\n\r\n              <div className=\"field\">\r\n                <div className=\"ui left icon input\">\r\n                  <i className=\"user icon\"></i>\r\n                  <input type=\"text\" name=\"username\" placeholder=\"Username\" onChange={this.onChange}/>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"field\">\r\n                <div className=\"ui left icon input\">\r\n                  <i className=\"envelope icon\"></i>\r\n                  <input type=\"text\" name=\"email\" placeholder=\"E-mail address\" onChange={this.onChange}/>                \r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"field\">\r\n                <div className=\"ui left icon input\">\r\n                  <i className=\"lock icon\"></i>\r\n                  <input type=\"password\" name=\"password\" placeholder=\"Password\" onChange={this.onChange}/>\r\n                </div>\r\n              </div>\r\n\r\n              <input type='submit' className=\"ui fluid large yellow submit button\" value='Create Account'></input>\r\n              <div className=\"ui error message\">\r\n              {this.state.error ? <h4 style={{color: 'red'}}>{this.state.error}</h4> : null}\r\n              </div>\r\n            </form>\r\n\r\n          </div>\r\n        </div> \r\n    </div>\r\n\r\n    );\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = {\r\n  loginSuccess: loginSuccess\r\n}\r\n\r\nexport default  withRouter(connect(null, mapDispatchToProps)(SignUp));","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/newTaskForm.jsx",["131"],"import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nclass newTaskForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"\",\r\n            description: \"\",\r\n            completed: false,\r\n            goal_id: this.props.location.state.goal_id,\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    \r\n\r\n    }\r\n\r\n\r\n    onChange = (event) => {\r\n        this.setState({ \r\n            [event.target.name]: event.target.value    \r\n        });\r\n    }\r\n\r\n    onSubmit(event) {\r\n    event.preventDefault();\r\n    const url = \"http://localhost:3001/tasks\";\r\n    const newTask = {...this.state}\r\n    //-----------------------\r\n    const reqObj = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body:  JSON.stringify(newTask)\r\n    }\r\n    //------------------------------\r\n    fetch(url, reqObj)\r\n        .then(response => {\r\n        if (response.ok) {\r\n            return response.json();\r\n        }\r\n        throw new Error(\"Network response was not ok.\");\r\n        })\r\n        .then(response => this.props.history.push(`/goals/${this.state.goal_id}`))\r\n        .catch(error => console.log(error.message));\r\n    }\r\n\r\n\r\n\r\nrender() {      \r\n    return (\r\n        \r\n        <div className='Goals'>\r\n\r\n            <div class=\"ui items\">\r\n                <h1 className=\"ui yellow image header\">Goal: {this.props.location.state.goal_name}</h1>\r\n            </div> \r\n\r\n\r\n            <div className=\"ui two column centered grid\">\r\n                <div className=\"twelve wide column\">\r\n\r\n                    <form className=\"ui form\" onSubmit={this.onSubmit} >\r\n                        \r\n                        <div className=\"field\">\r\n                            <label>Name</label>\r\n                            <input type=\"text\" name=\"name\" placeholder=\"Task Name\" onChange={this.onChange}/>\r\n                        </div>\r\n\r\n                        <div className=\"field\">\r\n                            <label>Extra Info</label>\r\n                            <textarea rows=\"3\" name=\"description\" placeholder=\"Description\" onChange={this.onChange}/>\r\n                        </div>\r\n\r\n\r\n                        <button className=\"ui fluid large yellow submit button\" type=\"submit\">Add Task</button>\r\n                        <div class=\"ui error message\"></div>\r\n                        \r\n                    </form>\r\n                </div>\r\n            </div>\r\n\r\n            \r\n        </div>\r\n    );\r\n  }\r\n\r\n\r\n}\r\nexport default newTaskForm;","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/Login.jsx",["132","133"],"import React from 'react';\r\nimport { Link , withRouter} from \"react-router-dom\";\r\nimport { connect } from 'react-redux'\r\nimport { loginSuccess } from '../actions/auth'\r\n\r\nimport logo from '../images/sprig logo.png'\r\n\r\n\r\nclass Login extends React.Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          username: \"\",\r\n          password: \"\",\r\n          error: \"\"\r\n      };\r\n      this.onChange = this.onChange.bind(this);\r\n      this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n\r\n  onChange = (event) => {\r\n    this.setState({ \r\n        [event.target.name]: event.target.value    \r\n    });\r\n}\r\n\r\n\r\n  onSubmit(event) {\r\n  event.preventDefault();\r\n  const url = \"http://localhost:3001/auth\";\r\n  const newUser = {...this.state}\r\n  //-----------------------\r\n  const reqObj = {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body:  JSON.stringify(newUser)\r\n  }\r\n  //------------------------------\r\n  fetch(url, reqObj)\r\n  .then(resp => resp.json())\r\n    .then(data => {\r\n      if (data.error){\r\n        this.setState({\r\n          error: data.error\r\n        })\r\n      } else {\r\n        this.props.loginSuccess(data)\r\n        this.props.history.push('/goals')\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n\r\n    <div className='Login'>\r\n\r\n      <h2 className=\"ui yellow image header\">\r\n        <img src={logo} className=\"image\"/>\r\n          {/* <div className=\"content\">\r\n          Welcome Back!\r\n          </div> */}\r\n      </h2>\r\n\r\n        <div className=\"ui two column centered grid\">\r\n          <div className=\"twelve wide column\">\r\n            \r\n            <form className=\"ui form\" onSubmit={this.onSubmit}>\r\n\r\n              <div className=\"field\">\r\n                <div className=\"ui left icon input\">\r\n                  <i className=\"user icon\"></i>\r\n                  <input type=\"text\" name=\"username\" placeholder=\"Username\" onChange={this.onChange} value={this.state.username}/>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"field\">\r\n                <div className=\"ui left icon input\">\r\n                  <i className=\"lock icon\"></i>\r\n                  <input type=\"password\" name=\"password\" placeholder=\"Password\" onChange={this.onChange} value={this.state.password}/>\r\n                </div>\r\n              </div>\r\n\r\n            <input type='submit' className=\"ui fluid large yellow submit button\" value='Login'></input>\r\n              <div className=\"ui error message\">\r\n              {this.state.error ? <h4 style={{color: 'red'}}>{this.state.error}</h4> : null}\r\n              </div>\r\n            </form>\r\n\r\n          </div>\r\n        </div> \r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  loginSuccess: loginSuccess\r\n}\r\n\r\n\r\nexport default withRouter(connect(null, mapDispatchToProps)(Login))","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/updateForm.jsx",["134","135","136"],"import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport logo from '../images/sprig logo.png'\r\n\r\nclass updateForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { goal: { tasks: [] }\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { match: {params: { id }}} = this.props;\r\n        \r\n          const url = `http://localhost:3001/goals/${id}`;\r\n  \r\n          fetch(url)\r\n          .then(response => {\r\n              if (response.ok) {\r\n              return response.json();\r\n              }\r\n              throw new Error(\"Network response was not ok.\");\r\n          })\r\n          .then(response => this.setState({ goal: response }))\r\n          .catch(() => this.props.history.push(`/goals/${id}`));\r\n      }\r\n\r\n    onChange = (event) => {\r\n        this.setState({ \r\n            goal: {...this.state.goal, [event.target.name]: event.target.value }   \r\n            \r\n        });\r\n\r\n    }\r\n\r\n    onSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    const { match: {params: { id }}} = this.props;\r\n    const url = `http://localhost:3001/goals/${id}`;\r\n    const updatedGoal = {...this.state}\r\n    //-----------------------\r\n    const reqObj = {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body:  JSON.stringify(updatedGoal)\r\n    }\r\n    //------------------------------\r\n    fetch(url, reqObj)\r\n        .then(response => {\r\n        if (response.ok) {\r\n            return response.json();\r\n        }\r\n        throw new Error(\"Network response was not ok.\");\r\n        })\r\n        .then(response => this.props.history.push(`/goals/${response.id}`))\r\n        .catch(error => console.log(error.message));\r\n    }\r\n\r\n\r\n\r\n\r\nrender() {      \r\n    const { goal } = this.state;\r\n    const goalTasks = goal.tasks;\r\n\r\n    let taskList = \"No tasks created yet\";\r\n\r\n    const allTasks =  goalTasks.map((task, index) => (\r\n        <div className='Task item'>\r\n\r\n        <i className=\"right triangle icon\"></i>\r\n\r\n          <div className=\"content\">\r\n            <div className=\"header\">{task.name}</div>\r\n            <div className=\"description\">{task.description}</div>\r\n          </div>\r\n\r\n          <div class=\"ui small right floated icon buttons\">\r\n            {/* <button class=\"ui button\"><i class=\"red eraser icon\"></i></button>\r\n            <button class=\"ui button\"><i class=\"black edit icon\"></i></button> */}\r\n          </div>\r\n\r\n      </div>\r\n        ))\r\n\r\n\r\n\r\n    return (\r\n\r\n        \r\n        \r\n        <div className='Goals'>\r\n\r\n            <form className=\"ui form\" onSubmit={this.onSubmit} >\r\n                \r\n                <div className=\"ui centered grid\">\r\n\r\n                    <div className=\" Main ten wide column\">\r\n                        <div className=\"ui segments\">\r\n                            <a className=\"ui small image\"> <img src={logo}/> </a>\r\n\r\n                                <div className=\"ui olive segment\">\r\n                                    <h3 class=\"ui header\">\r\n                                        <div className=\"field\">\r\n                                            <label>Name</label>\r\n                                            <input type=\"text\" name=\"name\" value={this.state.goal.name} onChange={this.onChange}/>\r\n                                        </div>\r\n                                    </h3>\r\n                                </div>\r\n\r\n                                <div className='ui horizontal segments'>\r\n                                    <div className='ui olive segment'>\r\n                                        <div className=\"field\">\r\n                                            <i class=\"calendar outline icon\"></i><label>Date </label>\r\n                                            <input type=\"date\" name=\"date\" value={this.state.goal.date} onChange={this.onChange}/>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className='ui olive segment'>\r\n                                        <div className=\"field\">\r\n                                            <i class=\"clock outline icon\"></i><label>Time </label>\r\n                                            <input type=\"time\" name=\"time\" value={this.state.goal.time} onChange={this.onChange}/>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className='ui secondary olive segment'>\r\n                                    <div className=\"ui header\">Info</div>\r\n                                        <div className=\"field\">\r\n                                            <textarea rows=\"4\" name=\"info\" value={this.state.goal.info} onChange={this.onChange}/>\r\n                                        </div>\r\n\r\n                                    <div class=\"two ui buttons\">\r\n                                        <button className=\"ui fluid large yellow submit button\" type=\"submit\">Update Goal</button>\r\n                                        <Link to={`/goals/${this.state.goal.id}`}>\r\n                                            <button className=\"ui fluid large red submit button\">Go Back\r\n                                            </button></Link>\r\n                                    </div>\r\n\r\n                                    <div class=\"ui error message\"></div>\r\n                                \r\n                                    <div className=\"ui divider\"></div>\r\n                                    <a className=\"header\"> <h3>Tasks</h3> </a>\r\n\r\n                                    <div className= 'ui middle aligned divided list'>\r\n                                    {goal.tasks.length > 0 ? allTasks : taskList}\r\n                                  </div>\r\n                                </div> \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            \r\n            </form>\r\n\r\n\r\n\r\n</div>\r\n\r\n\r\n    );\r\n  }\r\n\r\n\r\n}\r\nexport default updateForm;","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/newForm.jsx",["137","138","139"],"import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { connect } from 'react-redux'\r\nimport { currentUser } from '../actions/auth'\r\n\r\nimport logo from '../images/sprig logo.png'\r\n\r\nclass newForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"\",\r\n            info: \"\",\r\n            date: \"\",\r\n            time: \"\",\r\n            completed: false,\r\n            user_id: 0,\r\n            tag_id: 0\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n\r\n    onChange = (event) => {\r\n        this.setState({ \r\n            [event.target.name]: event.target.value    \r\n        });\r\n    }\r\n\r\n    onSubmit(event) {\r\n    event.preventDefault();\r\n    const url = \"http://localhost:3001/goals\";\r\n    const newGoal = {...this.state, user_id: this.props.currentUser.id}\r\n    //-----------------------\r\n    const reqObj = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body:  JSON.stringify(newGoal)\r\n    }\r\n    //------------------------------\r\n    fetch(url, reqObj)\r\n        .then(response => {\r\n        if (response.ok) {\r\n            return response.json();\r\n        }\r\n        throw new Error(\"Network response was not ok.\");\r\n        })\r\n        .then(response => this.props.history.push(`/goals/${response.id}`))\r\n        .catch(error => console.log(error.message));\r\n    }\r\n\r\n\r\n\r\nrender() {      \r\n    return (\r\n        \r\n        <div className='Goals'>\r\n\r\n                <h1 className=\"ui yellow image header\">What will you accomplish today?</h1>\r\n\r\n\r\n            <div className=\"ui two column centered grid\">\r\n                <div className=\"twelve wide column\">\r\n\r\n                    <form className=\"ui form\" onSubmit={this.onSubmit} >\r\n                        \r\n                        <div className=\"field\">\r\n                            <label>Name</label>\r\n                            <input type=\"text\" name=\"name\" placeholder=\"Goal Name\" onChange={this.onChange}/>\r\n                        </div>\r\n\r\n                        <div className=\"field\">\r\n                            <label>Info</label>\r\n                            <textarea rows=\"3\" name=\"info\" placeholder=\"Description\" onChange={this.onChange}/>\r\n                        </div>\r\n\r\n                        <div className=\"fields\">\r\n                            <div className=\"field\">\r\n                            <label>Date</label>\r\n                            <input type=\"date\" name=\"date\" onChange={this.onChange}/>\r\n                            </div>\r\n                            \r\n                            <div className=\"field\">\r\n                            <label>Time</label>\r\n                            <input type=\"time\" name=\"time\" onChange={this.onChange}/>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <button className=\"ui fluid large yellow submit button\" type=\"submit\">Add Goal</button>\r\n                        <div class=\"ui error message\"></div>\r\n                        \r\n                    </form>\r\n                </div>\r\n            </div>\r\n\r\n            \r\n        </div>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      currentUser: state.currentUser,\r\n      goals: state.goals\r\n    }\r\n  }\r\n\r\nexport default connect(mapStateToProps)(newForm);","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/updateTaskForm.jsx",["140"],"import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nclass updateTaskForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            task: []\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { match: {params: { id }}} = this.props;\r\n        \r\n          const url = `http://localhost:3001/tasks/${id}`;\r\n  \r\n          fetch(url)\r\n          .then(response => {\r\n              if (response.ok) {\r\n              return response.json();\r\n              }\r\n              throw new Error(\"Network response was not ok.\");\r\n          })\r\n          .then(response => this.setState({ task: response }))\r\n          .catch(() => this.props.history.push(`/tasks/${id}`));\r\n      }\r\n\r\n\r\n    onChange = (event) => {\r\n        this.setState({ \r\n            task: {...this.state.task, [event.target.name]: event.target.value }    \r\n        });\r\n    }\r\n\r\n    onSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    const { match: {params: { id }}} = this.props;\r\n    const url = `http://localhost:3001/tasks/${id}`;\r\n    const updatedTask = {...this.state}\r\n    //-----------------------\r\n    const reqObj = {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body:  JSON.stringify(updatedTask)\r\n    }\r\n    //------------------------------\r\n    fetch(url, reqObj)\r\n        .then(response => {\r\n        if (response.ok) {\r\n            return response.json();\r\n        }\r\n        throw new Error(\"Network response was not ok.\");\r\n        })\r\n        .then(response => this.props.history.push(`/goals/${this.state.task.goal_id}`))\r\n        .catch(error => console.log(error.message));\r\n    }\r\n\r\n\r\n\r\nrender() {      \r\n    return (\r\n        \r\n        <div className='Task'>\r\n\r\n            <div class=\"ui items\">\r\n                <h1 className=\"ui yellow image header\">Goal: {this.props.location.state.goal_name}</h1>\r\n            </div> \r\n\r\n\r\n            <div className=\"ui two column centered grid\">\r\n                <div className=\"twelve wide column\">\r\n\r\n                    <form className=\"ui form\" onSubmit={this.onSubmit} >\r\n                        \r\n                        <div className=\"field\">\r\n                            <label>Name</label>\r\n                            <input type=\"text\" name=\"name\" value={this.state.task.name} onChange={this.onChange}/>\r\n                        </div>\r\n\r\n                        <div className=\"field\">\r\n                            <label>Extra Info</label>\r\n                            <textarea rows=\"3\" name=\"description\" value={this.state.task.description} onChange={this.onChange}/>\r\n                        </div>\r\n\r\n\r\n                        <button className=\"ui fluid large yellow submit button\" type=\"submit\">Update Task</button>\r\n                        <div class=\"ui error message\"></div>\r\n                        \r\n                    </form>\r\n                </div>\r\n            </div>\r\n\r\n            \r\n        </div>\r\n    );\r\n  }\r\n\r\n\r\n}\r\nexport default updateTaskForm;","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/Footer.js",[],"/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/LoginFormSection.js",[],"/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/actions/auth.js",[],"/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/SceneComponent.jsx",["141","142","143","144"],"import * as BABYLON from \"@babylonjs/core/Legacy/legacy\";\r\nimport { Engine, Scene } from '@babylonjs/core'\r\nimport React, { useEffect, useRef } from 'react'\r\n\r\n\r\n\r\n\r\nexport default (props) => {\r\n    \r\n    const pet = document.querySelector('.VirtualPet')\r\n    const reactCanvas = useRef(null);\r\n    const { antialias, engineOptions, adaptToDeviceRatio, sceneOptions, onRender, onSceneReady, ...rest } = props;\r\n\r\n      \r\n\r\n\r\n    useEffect(() => {\r\n        if (reactCanvas.current) {\r\n            const engine = new Engine(reactCanvas.current, antialias, engineOptions, adaptToDeviceRatio);\r\n            const scene = new Scene(engine, sceneOptions);\r\n\r\n            if (scene.isReady()) {\r\n                props.onSceneReady(scene)\r\n                \r\n            } else {\r\n                scene.onReadyObservable.addOnce(scene => props.onSceneReady(scene));\r\n            }\r\n\r\n            engine.runRenderLoop(() => {\r\n                if (typeof onRender === 'function') {\r\n                    onRender(scene);\r\n                }\r\n                scene.render();\r\n            })\r\n            \r\n            const resize = () => {\r\n                scene.getEngine().resize();\r\n            }\r\n            if (window) {\r\n                window.addEventListener('resize', resize);\r\n            }\r\n            return () => {\r\n                scene.getEngine().dispose();\r\n                if (window) {\r\n                    window.removeEventListener('resize', resize);\r\n                }\r\n            }\r\n        }\r\n    }, [reactCanvas])\r\n    return (\r\n        <canvas ref={reactCanvas} {...rest} />\r\n    );\r\n}","/mnt/c/Users/Boss-Alethei/dev/flatiron/labs/sprig_goals_frontend/src/components/MusicPlayer.js",["145","146","147","148","149","150"],{"ruleId":"151","severity":1,"message":"152","line":9,"column":8,"nodeType":"153","messageId":"154","endLine":9,"endColumn":14},{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"151","severity":1,"message":"159","line":4,"column":10,"nodeType":"153","messageId":"154","endLine":4,"endColumn":21},{"ruleId":"160","severity":1,"message":"161","line":26,"column":25,"nodeType":"162","endLine":26,"endColumn":77},{"ruleId":"160","severity":1,"message":"161","line":56,"column":25,"nodeType":"162","endLine":56,"endColumn":77},{"ruleId":"151","severity":1,"message":"163","line":2,"column":17,"nodeType":"153","messageId":"154","endLine":2,"endColumn":25},{"ruleId":"151","severity":1,"message":"164","line":5,"column":10,"nodeType":"153","messageId":"154","endLine":5,"endColumn":24},{"ruleId":"151","severity":1,"message":"159","line":8,"column":10,"nodeType":"153","messageId":"154","endLine":8,"endColumn":21},{"ruleId":"151","severity":1,"message":"165","line":116,"column":13,"nodeType":"153","messageId":"154","endLine":116,"endColumn":27},{"ruleId":"166","severity":1,"message":"167","line":198,"column":31,"nodeType":"162","endLine":198,"endColumn":61},{"ruleId":"160","severity":1,"message":"161","line":198,"column":62,"nodeType":"162","endLine":198,"endColumn":79},{"ruleId":"166","severity":1,"message":"167","line":223,"column":35,"nodeType":"162","endLine":223,"endColumn":57},{"ruleId":"151","severity":1,"message":"159","line":5,"column":10,"nodeType":"153","messageId":"154","endLine":5,"endColumn":21},{"ruleId":"151","severity":1,"message":"168","line":1,"column":26,"nodeType":"153","messageId":"154","endLine":1,"endColumn":35},{"ruleId":"151","severity":1,"message":"169","line":2,"column":10,"nodeType":"153","messageId":"154","endLine":2,"endColumn":14},{"ruleId":"151","severity":1,"message":"170","line":12,"column":12,"nodeType":"153","messageId":"154","endLine":12,"endColumn":16},{"ruleId":"171","severity":1,"message":"172","line":28,"column":13,"nodeType":"173","messageId":"174","endLine":28,"endColumn":19},{"ruleId":"160","severity":1,"message":"161","line":43,"column":17,"nodeType":"162","endLine":43,"endColumn":79},{"ruleId":"151","severity":1,"message":"175","line":2,"column":8,"nodeType":"153","messageId":"154","endLine":2,"endColumn":16},{"ruleId":"151","severity":1,"message":"176","line":10,"column":54,"nodeType":"153","messageId":"154","endLine":10,"endColumn":65},{"ruleId":"151","severity":1,"message":"177","line":12,"column":5,"nodeType":"153","messageId":"154","endLine":12,"endColumn":14},{"ruleId":"151","severity":1,"message":"178","line":13,"column":5,"nodeType":"153","messageId":"154","endLine":13,"endColumn":8},{"ruleId":"151","severity":1,"message":"179","line":39,"column":13,"nodeType":"153","messageId":"154","endLine":39,"endColumn":24},{"ruleId":"151","severity":1,"message":"180","line":130,"column":17,"nodeType":"153","messageId":"154","endLine":130,"endColumn":26},{"ruleId":"151","severity":1,"message":"181","line":1,"column":16,"nodeType":"153","messageId":"154","endLine":1,"endColumn":24},{"ruleId":"151","severity":1,"message":"169","line":2,"column":10,"nodeType":"153","messageId":"154","endLine":2,"endColumn":14},{"ruleId":"160","severity":1,"message":"161","line":82,"column":9,"nodeType":"162","endLine":82,"endColumn":44},{"ruleId":"151","severity":1,"message":"169","line":2,"column":10,"nodeType":"153","messageId":"154","endLine":2,"endColumn":14},{"ruleId":"151","severity":1,"message":"169","line":2,"column":10,"nodeType":"153","messageId":"154","endLine":2,"endColumn":14},{"ruleId":"160","severity":1,"message":"161","line":64,"column":9,"nodeType":"162","endLine":64,"endColumn":44},{"ruleId":"166","severity":1,"message":"167","line":107,"column":29,"nodeType":"162","endLine":107,"endColumn":59},{"ruleId":"160","severity":1,"message":"161","line":107,"column":60,"nodeType":"162","endLine":107,"endColumn":77},{"ruleId":"166","severity":1,"message":"167","line":150,"column":37,"nodeType":"162","endLine":150,"endColumn":59},{"ruleId":"151","severity":1,"message":"169","line":2,"column":10,"nodeType":"153","messageId":"154","endLine":2,"endColumn":14},{"ruleId":"151","severity":1,"message":"159","line":5,"column":10,"nodeType":"153","messageId":"154","endLine":5,"endColumn":21},{"ruleId":"151","severity":1,"message":"182","line":7,"column":8,"nodeType":"153","messageId":"154","endLine":7,"endColumn":12},{"ruleId":"151","severity":1,"message":"169","line":2,"column":10,"nodeType":"153","messageId":"154","endLine":2,"endColumn":14},{"ruleId":"151","severity":1,"message":"183","line":1,"column":13,"nodeType":"153","messageId":"154","endLine":1,"endColumn":20},{"ruleId":"184","severity":1,"message":"185","line":8,"column":1,"nodeType":"186","endLine":53,"endColumn":2},{"ruleId":"151","severity":1,"message":"187","line":10,"column":11,"nodeType":"153","messageId":"154","endLine":10,"endColumn":14},{"ruleId":"188","severity":1,"message":"189","line":49,"column":8,"nodeType":"190","endLine":49,"endColumn":21,"suggestions":"191"},{"ruleId":"151","severity":1,"message":"175","line":2,"column":8,"nodeType":"153","messageId":"154","endLine":2,"endColumn":16},{"ruleId":"151","severity":1,"message":"192","line":74,"column":11,"nodeType":"153","messageId":"154","endLine":74,"endColumn":24},{"ruleId":"151","severity":1,"message":"193","line":97,"column":13,"nodeType":"153","messageId":"154","endLine":97,"endColumn":18},{"ruleId":"151","severity":1,"message":"193","line":129,"column":13,"nodeType":"153","messageId":"154","endLine":129,"endColumn":18},{"ruleId":"160","severity":1,"message":"161","line":166,"column":15,"nodeType":"162","endLine":166,"endColumn":45},{"ruleId":"160","severity":1,"message":"161","line":202,"column":30,"nodeType":"162","endLine":202,"endColumn":74},"no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar","no-native-reassign",["194"],"no-negated-in-lhs",["195"],"'currentUser' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Redirect' is defined but never used.","'SetStateAction' is defined but never used.","'tasklistlength' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useEffect' is defined but never used.","'Link' is defined but never used.","'user' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'ReactDOM' is defined but never used.","'MeshBuilder' is defined but never used.","'container' is defined but never used.","'box' is defined but never used.","'environment' is assigned a value but never used.","'materials' is assigned a value but never used.","'useState' is defined but never used.","'logo' is defined but never used.","'BABYLON' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'pet' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'adaptToDeviceRatio', 'antialias', 'engineOptions', 'onRender', 'props', and 'sceneOptions'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["196"],"'timelineWidth' is assigned a value but never used.","'audio' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"197","fix":"198"},"Update the dependencies array to be: [adaptToDeviceRatio, antialias, engineOptions, onRender, props, reactCanvas, sceneOptions]",{"range":"199","text":"200"},[1514,1527],"[adaptToDeviceRatio, antialias, engineOptions, onRender, props, reactCanvas, sceneOptions]"]